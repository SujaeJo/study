#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <stdio.h>

typedef enum {
	INIT,
	ADD,
	DELETE,
	CHANGE,
	GETCOUNT
} COMMAND;

extern void init();
extern void addEvent(int uid, char ename[], int groupid);
extern int deleteEvent(int uid, char ename[]);
extern int changeEvent(int uid, char ename[], char cname[]);
extern int getCount(int uid);

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

static int mSeed;
static int pseudo_rand(void)
{
	mSeed = mSeed * 431345 + 2531999;
	return mSeed & 0x7FFFFFFF;
}

static void make_string(char str[], int seed)
{
	mSeed = seed;
	int length = 5 + pseudo_rand() % 10;
	for (int i = 0; i < length; ++i) {
		str[i] = 'a' + pseudo_rand() % 26;
	}
	str[length] = 0;
}

static int run()
{
	int answer = 100;

	int cmd, p1, p2, p3, p4;
	char str1[15], str2[15];

	int N, ret, flag;
	scanf("%d %d %d", &cmd, &N, &flag);

	init();

	for (int i = 1; i < N; ++i) {
		scanf("%d", &cmd);
		switch (cmd) {
		case ADD:
			if (flag == 1) {
				scanf("%d %s %d", &p1, str1, &p3);
			}
			else {
				scanf("%d %d %d", &p1, &p2, &p3);
				make_string(str1, p2);
			}
			addEvent(p1, str1, p3);
			break;

		case DELETE:
			if (flag == 1) {
				scanf("%d %s %d", &p1, str1, &p3);
			}
			else {
				scanf("%d %d %d", &p1, &p2, &p3);
				make_string(str1, p2);
			}
			ret = deleteEvent(p1, str1);
			if (ret != p3)
				answer = 0;
			break;

		case CHANGE:
			if (flag == 1) {
				scanf("%d %s %s %d", &p1, str1, str2, &p4);
			}
			else {
				scanf("%d %d %d %d", &p1, &p2, &p3, &p4);
				make_string(str1, p2);
				make_string(str2, p3);
			}
			ret = changeEvent(p1, str1, str2);
			if (ret != p4)
				answer = 0;
			break;

		case GETCOUNT:
			scanf("%d %d", &p1, &p2);
			ret = getCount(p1);
			if (ret != p2)
				answer = 0;
			break;

		default:
			break;
		}
	}

	return answer;
}

int main()
{
	setbuf(stdout, NULL);
	//freopen("sample_input.txt", "r", stdin);

	int T;
	scanf("%d", &T);

	for (int tc = 1; tc <= T; tc++) {
		printf("#%d %d\n", tc, run());
	}

	return 0;
}


#define MAX_USER 1000
#define MAX_GROUP 100
#define MAX_NAME 16
#define MAX_TABLE 400

typedef struct _HASH
{
  char name[MAX_NAME]; // key
  int gid; // group id
  int users[5]; // list of uid
}HASH;

struct _USER
{
  HASH tb[MAX_TABLE];
  int event_cnt;
}USER[MAX_USER];

struct _GROUP
{
  HASH tb[MAX_TABLE];
}GROUP[MAX_GROUP];


void mstrcpy(char dst[], const char src[]) {
	int c = 0;
	while ((dst[c] = src[c]) != 0) ++c;
}

int mstrcmp(const char str1[], const char str2[]) {
	int c = 0;
	while (str1[c] != 0 && str1[c] == str2[c]) ++c;
	return str1[c] - str2[c];
}

void init()
{
  int i, j, k;
  for (i=0; i<MAX_USER; i++)
  {
    USER[i].event_cnt = 0;
    for (j=0;j<MAX_TABLE;j++)
    {
      USER[i].tb[j].gid = -1;
      for (k=0;k<MAX_NAME;k++)
      {
        USER[i].tb[j].name[k] = 0;
      }
    }
  }
  for (i=0;i<MAX_GROUP;i++)
  {
    for(j=0;j<MAX_TABLE;j++)
    {
      for(k=0;k<5;k++)
      {
        GROUP[i].tb[j].users[k] = -1;
      }
      for (k=0;k<MAX_NAME;k++)
      {
        GROUP[i].tb[j].name[k] = 0;
      }
    }
  }
}

unsigned long hash(char* key)
{
  unsigned long hash = 5381;
  int c;

  while(c = *key++)
  {
    hash = (((hash << 5) + hash) + c) % MAX_TABLE;
  }
  return hash % MAX_TABLE;
}


int find(HASH* tb, char* name)
{
  unsigned long h = hash(name);
  int cnt = MAX_TABLE;
  while(tb[h].name[0] != 0 && cnt--)
  {
    if (mstrcmp(tb[h].name, name) == 0)
    {
      return h;
    }
    h = (h + 1) % MAX_TABLE;
  }
  return h;
}

void add(int uid, char ename[], int groupid)
{
  int idx = find(USER[uid].tb, ename);
  mstrcpy(USER[uid].tb[idx].name, ename);
  USER[uid].tb[idx].gid = groupid;

  idx = find(GROUP[groupid].tb, ename);
  mstrcpy(GROUP[groupid].tb[idx].name, ename);

  for (int i=0; i<5; i++)
  {
    if (GROUP[groupid].tb[idx].users[i] == -1)
    {
      GROUP[groupid].tb[idx].users[i] = uid;
      break;
    }
  }
  USER[uid].event_cnt++;
}

void addEvent(int uid, char ename[], int groupid)
{
  add(uid, ename, groupid);
}


int deleteEvent(int uid, char ename[])
{
  int idx = find(USER[uid].tb, ename);
  int gid = USER[uid].tb[idx].gid;

  idx = find(GROUP[gid].tb, ename);

  int del_cnt= 0;

  if (GROUP[gid].tb[idx].users[0] == uid) // master
  {
    for (int i = 0;i<5;i++)
    {
      if (GROUP[gid].tb[idx].users[i] != -1)
      {
        int tempID = GROUP[gid].tb[idx].users[i];
        GROUP[gid].tb[idx].users[i] = -1;
        USER[tempID].event_cnt--; // delete others
        del_cnt++;
      }
    }
  }
  else
  {
    for (int i = 0;i<5;i++)
    {
      if (GROUP[gid].tb[idx].users[i] == uid)
      {
        GROUP[gid].tb[idx].users[i] = -1;
        USER[uid].event_cnt--;
        del_cnt++;
      }
    }
  }


	return del_cnt;
}

int changeEvent(int uid, char ename[], char cname[])
{
  int idx = find(USER[uid].tb, ename);
  int gid = USER[uid].tb[idx].gid;

  idx = find(GROUP[gid].tb, ename);

  int del_cnt= 0;

  if (GROUP[gid].tb[idx].users[0] == uid) // master
  {
    for (int i = 0;i<5;i++)
    {
      if (GROUP[gid].tb[idx].users[i] != -1)
      {
        int tempID = GROUP[gid].tb[idx].users[i];
        GROUP[gid].tb[idx].users[i] = -1;
        USER[tempID].event_cnt--; // delete others
        del_cnt++;
        add(uid, cname, gid);
      }
    }

  }
  else
  {
    for (int i = 0;i<5;i++)
    {
      if (GROUP[gid].tb[idx].users[i] == uid)
      {
        GROUP[gid].tb[idx].users[i] = -1;
        USER[uid].event_cnt--;
        del_cnt++;
        add(uid, cname, gid);
      }
    }
  }

	return del_cnt;
}

int getCount(int uid)
{
	return USER[uid].event_cnt;
}
