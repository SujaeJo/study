#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <stdio.h>

void init();
void createUser(char userName[], char groupName[]);
int createDirectory(char userName[], char path[], char directoryName[], int permission);
int createFile(char userName[], char path[], char fileName[], char fileExt[]);
int find(char userName[], char pattern[]);

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

static int run(int Ans)
{
    int n;
    scanf("%d", &n);
    init();

    char userName[8];
    char groupName[8];
    char path[500];
    char directoryName[8];
    int permission;
    int expectedAnswer;
    char fileName[8];
    char fileExt[8];
    char pattern[500];

    for(int i=0; i<n; i++)
    {
        int type;
        scanf("%d", &type);

        if(type == 1)
        {
            scanf("%s %s", userName, groupName);

            createUser(userName, groupName);
        }
        else if(type == 2)
        {
            scanf("%s %s %s %d", userName, path, directoryName, &permission);

            int userAnswer = createDirectory(userName, path, directoryName, permission);
            scanf("%d", &expectedAnswer);
            //printf("### [createDirectory]expectedAnswer:%d, userAnswer:%d\n", expectedAnswer, userAnswer);
            if(userAnswer != expectedAnswer)
                Ans = 0;
        }
        else if(type == 3)
        {
            scanf("%s %s %s %s", userName, path, fileName, fileExt);

            int userAnswer = createFile(userName, path, fileName, fileExt);
            scanf("%d", &expectedAnswer);
            //printf("### [createFile]expectedAnswer:%d, userAnswer:%d\n", expectedAnswer, userAnswer);
            if(userAnswer != expectedAnswer)
                Ans = 0;
        }
        else if(type == 4)
        {
            scanf("%s %s", userName, pattern);

            int userAnswer = find(userName, pattern);
            scanf("%d", &expectedAnswer);
            //printf("### [find]expectedAnswer:%d, userAnswer:%d\n", expectedAnswer, userAnswer);
            if(userAnswer != expectedAnswer)
                Ans = 0;
        }
    }

    return Ans;
}

int main()
{
    setbuf(stdout, NULL);
    // freopen("sample_input.txt", "r", stdin);

    int T, Ans;
    scanf("%d %d", &T, &Ans);

    for (int tc = 1; tc <= T; tc++)
    {
        printf("#%d %d\n", tc, run(Ans));
    }

    return 0;
}



struct Node
{
  bool isDir; // 1 is directory, 0 is file
  char name[8];
  char ext[8];
  int uid;
  int gid;
  int permission;
  int childRoot;
  int sibling;
};

int nodeIndex;
Node node[10000];

char user[20][8];
char group[10][8];
int getGidFromUid[20];
int numOfUser;
int numOfGroup;





// The below commented functions are for your reference. If you want
// to use it, uncomment these functions.

int mstrcmp(const char *a, const char *b)
{
  int i;
  for (i = 0; a[i] != '\0'; ++i)
    if (a[i] != b[i])
      return a[i] - b[i];
  return a[i] - b[i];
}

void mstrcpy(char *dest, const char *src)
{
  int i = 0;
  while (src[i] != '\0')
  {
    dest[i] = src[i];
    i++;
  }
  dest[i] = src[i];
}

int getGid(char groupName[])
{
  for (int i = 0; i < numOfGroup; i++)
  {
    if (mstrcmp(group[i], groupName) == 0)
    {
      return i;
    }
  }
  return -1;
}

int getUid(char userName[])
{
  for (int i = 0; i < numOfUser; i++)
  {
    if (mstrcmp(user[i], userName) == 0)
    {
      return i;
    }
  }
  return -1;
}

int pathParsing(char path[], int index, char word[])
{
  /*
  int wordIndex = 0;
  for(int i = index; (path[i] != '/' && path[i] != '\0') ;i++)
  {
    word[wordIndex] = path[i];
    wordIndex++;
  }
  word[wordIndex++] = '\0';
  return wordIndex + 1;
  */
  int wordIndex = 0;

  while (path[index] != '\0' && path[index] != '/')
	{
		word[wordIndex] = path[index];
		++wordIndex;
		++index;
	}
  word[wordIndex] = '\0';

  if (path[index] == '/')
  {
    index++;
  }
  return index;
}

int filePathParsing(char path[], int index, char word[])
{
  /*
  int wordIndex = 0;
  for(int i = index; (path[i] != '/' && path[i] != '\0') ;i++)
  {
    word[wordIndex] = path[i];
    wordIndex++;
  }
  word[wordIndex++] = '\0';
  return wordIndex + 1;
  */
  int wordIndex = 0;

  while (path[index] != '\0' && path[index] != '.')
	{
		word[wordIndex] = path[index];
		++wordIndex;
		++index;
	}
  word[wordIndex] = '\0';

  if (path[index] == '.')
  {
    index++;
  }
  return index;
}


void init()
{
  node[0].isDir = true;
  mstrcpy(node[0].name, "admin");
  mstrcpy(node[0].ext, "admin");
  node[0].uid = 0;
  node[0].gid = 0;
  node[0].permission = 2;
  node[0].childRoot = 0;
  node[0].sibling = 0;

  mstrcpy(user[0], "admin");
  mstrcpy(group[0], "admin");
  numOfUser = 1;
  numOfGroup = 1;
  nodeIndex = 1;
  getGidFromUid[0] = 0;
}

void createUser(char userName[], char groupName[])
{
  //printf("@@@ createUser start @@@ - numOfUser[%d], userName[%s], groupName[%s]\n", numOfUser, userName, groupName);
  mstrcpy(user[numOfUser], userName);
  int gid = getGid(groupName);
  //printf("groupName[%s], gid[%d]\n", groupName, gid);
  if (gid == -1) // there is no group...
  {
    mstrcpy(group[numOfGroup], groupName);
    gid = numOfGroup++;
    //printf("groupName[%s] is not exist, so we are add it. gid[%d]\n", groupName, gid);
  }
  else
	{
		//printf("groupName[%s] is already exist. gid[%d]\n", groupName, gid);
	}
  //printf("userName[%s], uid[%d], gid[%d] \n", userName, numOfUser, gid);
  getGidFromUid[numOfUser] = gid;
  numOfUser++;
  //printf("@@@ createUser end @@@\n");
}

int createDirectory(char userName[], char path[], char directoryName[], int permission)
{
  //printf("@@@ createDirectory start @@@ - userName[%s], path[%s], directoryName[%s], permission[%d]\n", userName, path, directoryName, permission);
  int uid = getUid(userName);
  if (uid == -1)
  {
    //printf("error! - uid is invalid\n");
    return 0;
  }
  int gid = getGidFromUid[uid];
  //printf("uid[%d], gid[%d]\n", uid, gid);
  int index = 1;
  int cur = 0;

  while(path[index] != '\0')
  {
    //printf("111 path[%d] is %c\n", index, path[index]);
    char word[8];
    index = pathParsing(path, index, word);
    //printf("index[%d], cur[%d], node[%d].childRooot is %d\n", index, cur, cur, node[cur].childRoot);
    int tempIndex = node[cur].childRoot;
    while(tempIndex)
    {
      //printf("1 tempIndex[%d]\n", tempIndex);
      //printf("isDir[%d], name[%s], word[%s]\n", node[tempIndex].isDir, node[tempIndex].name, word);
      if ((node[tempIndex].isDir == true) && (mstrcmp(node[tempIndex].name, word) == 0))
      {
        cur = tempIndex;
        //printf("node[%d].name is %s\n", cur, node[cur].name);
        if (node[cur].permission == 0 && node[cur].uid != uid)
        {
          return 0;
        }
        if (node[cur].permission == 1 && node[cur].gid != gid)
        {
          return 0;
        }
        //printf("break!\n");
        break;
      }
      tempIndex = node[tempIndex].sibling;
      //printf("2 tempIndex[%d]\n", tempIndex);
    }
    //printf("222 path[%d] is %c\n", tempIndex, path[tempIndex]);
  }
  //printf("create directory to nodeIndex[%d], cur[%d]\n", nodeIndex, cur);
  node[nodeIndex].isDir = true;
  mstrcpy(node[nodeIndex].name, directoryName);
  node[nodeIndex].ext[0] = '\0';
  node[nodeIndex].uid = uid;
  node[nodeIndex].gid = gid;
  node[nodeIndex].permission = permission;
  node[nodeIndex].childRoot = 0;
  node[nodeIndex].sibling = node[cur].childRoot;
  /*printf("isDir[%d] name[%s] ext[%s] uid[%d] gid[%d] permission[%d] childroot[%d] siblingnext[%d]\n",
          node[nodeIndex].isDir, node[nodeIndex].name, node[nodeIndex].ext,
          node[nodeIndex].uid, node[nodeIndex].gid, node[nodeIndex].permission,
          node[nodeIndex].childRoot, node[nodeIndex].sibling);*/
  node[cur].childRoot = nodeIndex++;
  //printf("node[%d].childroot is %d\n", cur, node[cur].childRoot);
  //printf("@@@ createDirectory end @@@\n");
  return 1;
}


int createFile(char userName[], char path[], char fileName[], char fileExt[])
{
  //printf("@@@ createFile start @@@ - userName[%s], path[%s], fileName[%s], fileExt[%s]\n", userName, path, fileName, fileExt);
  int uid = getUid(userName);
  if (uid == -1)
  {
    //printf("error! - uid is invalid\n");
    return 0;
  }
  int gid = getGidFromUid[uid];

  int index = 1;
  int cur = 0;

  while(path[index] != '\0')
  {
    //printf("111 path[%d] is %c\n", index, path[index]);
    char word[8];
    index = pathParsing(path, index, word);
    //printf("index[%d], cur[%d]\n", index, cur);
    int tempIndex = node[cur].childRoot;
    while(tempIndex)
    {
      //printf("1 - tempIndex is %d\n", tempIndex);
      //printf("isDir[%d], name[%s], word[%s]\n", node[tempIndex].isDir, node[tempIndex].name, word);
      if ((node[tempIndex].isDir == true) && (mstrcmp(node[tempIndex].name, word) == 0))
      {
        cur = tempIndex;
        //printf("node[%d].name is %s\n", cur, node[cur].name);
        if (node[cur].permission == 0 && node[cur].uid != uid)
        {
          return 0;
        }
        if (node[cur].permission == 1 && node[cur].gid != gid)
        {
          return 0;
        }
        //printf("break!\n");
        break;
      }
      tempIndex = node[tempIndex].sibling;
      //printf("2 - tempIndex is %d\n", tempIndex);
    }
  }
  //printf("create file to node[%d], cur[%d]\n", nodeIndex, cur);
  node[nodeIndex].isDir = false;
  mstrcpy(node[nodeIndex].name, fileName);
  mstrcpy(node[nodeIndex].ext, fileExt);
  node[nodeIndex].uid = uid;
  node[nodeIndex].gid = gid;
  node[nodeIndex].permission = 2;
  node[nodeIndex].childRoot = 0;
  node[nodeIndex].sibling = node[cur].childRoot;
  /*printf("isDir[%d] name[%s] ext[%s] uid[%d] gid[%d] permission[%d] childroot[%d] sibling[%d]\n",
          node[nodeIndex].isDir, node[nodeIndex].name, node[nodeIndex].ext,
          node[nodeIndex].uid, node[nodeIndex].gid, node[nodeIndex].permission,
          node[nodeIndex].childRoot, node[nodeIndex].sibling);*/
  node[cur].childRoot = nodeIndex++;
  //printf("node[%d].childroot is %d\n", cur, node[cur].childRoot);
  return 1;
}

int find(int uid, int gid, char pattern[], int wordIdx, int fileIdx, int nodeIdx)
{
  int ret = 0;

  if (wordIdx == fileIdx) // check file.ext
  {
    char fileName[8];
    char extName[8];
    wordIdx = filePathParsing(pattern, wordIdx, fileName);
    mstrcpy(extName, pattern + wordIdx);

    if (fileName[0] == '*' && extName[0] == '*')
    {
      int tempIdx = node[nodeIdx].childRoot;
      while(tempIdx)
      {
        if (node[tempIdx].isDir == false)
        {
          ret++;
        }
        tempIdx = node[tempIdx].sibling;
      }
    }
    else if (fileName[0] == '*')
    {
      int tempIdx = node[nodeIdx].childRoot;
      while(tempIdx)
      {
        if ((node[tempIdx].isDir == false) && (mstrcmp(node[tempIdx].ext, extName) == 0))
        {
          ret++;
        }
        tempIdx = node[tempIdx].sibling;
      }
    }
    else if(extName[0] == '*')
    {
      int tempIdx = node[nodeIdx].childRoot;
      while(tempIdx)
      {
        if ((node[tempIdx].isDir == false) && (mstrcmp(node[tempIdx].name, fileName) == 0))
        {
          ret++;
        }
        tempIdx = node[tempIdx].sibling;
      }
    }
    else
    {
      int tempIdx = node[nodeIdx].childRoot;
      while(tempIdx)
      {
        if ((node[tempIdx].isDir == false) &&
            (mstrcmp(node[tempIdx].name, fileName) == 0 && mstrcmp(node[tempIdx].ext, extName) == 0))
        {
          ret++;
          break;
        }
        tempIdx = node[tempIdx].sibling;
      }
    }
    return ret;
  }
  else // check directory
  {
    char word[8];
    wordIdx = pathParsing(pattern, wordIdx, word);
    if (word[0] == '*') // directory name is *
    {
      int tempIdx = node[nodeIdx].childRoot;
      while(tempIdx)
      {
        if ((node[tempIdx].isDir == true) &&
            ((node[tempIdx].permission == 2) ||
            (node[tempIdx].permission == 0 && uid == node[tempIdx].uid) ||
            (node[tempIdx].permission == 1 && gid == node[tempIdx].gid)))
        {
          ret += find(uid, gid, pattern, wordIdx, fileIdx, tempIdx);
        }

        tempIdx = node[tempIdx].sibling;
      }

    }
    else // directory name is specific folder name
    {
      int tempIdx = node[nodeIdx].childRoot;
      while(tempIdx)
      {
        if (node[tempIdx].isDir == true && mstrcmp(node[tempIdx].name, word) == 0)
        {
          if (node[tempIdx].permission == 0 && uid != node[tempIdx].uid)
            break;
          if (node[tempIdx].permission == 1 && gid != node[tempIdx].gid)
            break;
          ret = find(uid, gid, pattern, wordIdx, fileIdx, tempIdx);
          break;
        }
        tempIdx = node[tempIdx].sibling;
      }
    }
  }
  //printf("&&& find end &&& - 2ret:%d\n",ret);
  return ret;
}

int find(char userName[], char pattern[])
{
  //printf("\n\n@@@ find start @@@ - pattern:%s\n", pattern);
  int uid = getUid(userName);
  if (uid == -1)
  {
    printf("error! - uid is invalid\n");
    return 0;
  }
  int gid = getGidFromUid[uid];

  int fileIndex = 0; // indicate where is file index

  while(pattern[fileIndex] != '\0')
  {
    fileIndex++;
  }
  while(pattern[fileIndex] != '/')
  {
    fileIndex--;
  }
  fileIndex++;

  int result = find(uid, gid, pattern, 1, fileIndex, 0);
  //printf("@@@ find end @@@ - result:%d\n\n\n", result);
  return result;
}
