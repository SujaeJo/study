#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#include<stdio.h>
using namespace std;

extern void init(int N);
extern void follow(int uId1, int uId2, int timestamp);
extern void makePost(int uId, int pId, int timestamp);
extern void like(int pId, int timestamp);
extern void getFeed(int uId, int timestamp, int pIdList[]);

static int mSeed;
static int pseudo_rand(void)
{
	mSeed = mSeed * 431345 + 2531999;
	return mSeed & 0x7FFFFFFF;
}

static int follow_status[1005][1005];
static int answer_score;
static int n; // n >= 2 && n <= 1000
static int end_timestamp;
static int follow_ratio; // follow_ratio >= 1 && follow_ratio <= 10000
static int make_ratio; // make_ratio >= 1 && make_ratio <= 10000
static int like_ratio; // like_ratio >= 1 && like_ratio <= 10000
static int get_feed_ratio; // get_feed_ratio >= 1 && get_feed_ratio <= 10000
static int post_arr[200000];
static int total_post_cnt;
static int min_post_cnt;

static bool run()
{
	int uId1, uId2, pId, pIdList[10], ans_pIdList[10], rand_val;
	bool ret = true;

	scanf("%d%d%d%d%d%d%d", &mSeed, &n, &end_timestamp, &follow_ratio, &make_ratio, &like_ratio, &get_feed_ratio);
	init(n);

	for (int uId1 = 1; uId1 <= n; uId1++)
	{
		follow_status[uId1][uId1] = 1;
		int m = n / 10 + 1;
		if (m > 10)
			m = 10;
		for (int i = 0; i < m; i++)
		{
			uId2 = uId1;
			while (follow_status[uId1][uId2] == 1)
			{
				uId2 = pseudo_rand() % n + 1;
			}
			follow(uId1, uId2, 1);
			follow_status[uId1][uId2] = 1;
		}
	}
	min_post_cnt = total_post_cnt = 1;

	for (int timestamp = 1; timestamp <= end_timestamp; timestamp++)
	{
		rand_val = pseudo_rand() % 10000;
		if (rand_val < follow_ratio)
		{
			uId1 = pseudo_rand() % n + 1;
			uId2 = pseudo_rand() % n + 1;
			int lim = 0;
			while (follow_status[uId1][uId2] == 1 || uId1 == uId2)
			{
				uId2 = pseudo_rand() % n + 1;
				lim++;
				if (lim >= 5)
					break;
			}
			if (follow_status[uId1][uId2] == 0)
			{
				follow(uId1, uId2, timestamp);
				follow_status[uId1][uId2] = 1;
			}
		}
		rand_val = pseudo_rand() % 10000;

		if (rand_val < make_ratio)
		{
			uId1 = pseudo_rand() % n + 1;
			post_arr[total_post_cnt] = timestamp;

			makePost(uId1, total_post_cnt, timestamp);
			total_post_cnt += 1;
		}

		rand_val = pseudo_rand() % 10000;

		if (rand_val < like_ratio && total_post_cnt - min_post_cnt > 0)
		{
			while (post_arr[min_post_cnt] < timestamp - 1000 && min_post_cnt < total_post_cnt)
				min_post_cnt++;

			if (total_post_cnt != min_post_cnt)
			{
				pId = pseudo_rand() % (total_post_cnt - min_post_cnt) + min_post_cnt;
				like(pId, timestamp);
			}
		}

		rand_val = pseudo_rand() % 10000;
		if (rand_val < get_feed_ratio && total_post_cnt > 0)
		{
			uId1 = pseudo_rand() % n + 1;
			getFeed(uId1, timestamp, pIdList);

			for (int i = 0; i < 10; i++)
			{
				scanf("%d", ans_pIdList + i);
			}

			for (int i = 0; i < 10; i++)
			{
				if (ans_pIdList[i] == 0)
					break;

				if (ans_pIdList[i] != pIdList[i])
				{
					ret = false;
				}
			}
		}
	}

	return ret;
}

int main()
{
//	freopen("sample_input.txt", "r", stdin);
	setbuf(stdout, NULL);
	int tc;
	scanf("%d%d", &tc, &answer_score);

	for (int t = 1; t <= tc; t++)
	{
		int score;
		for (int i = 0; i < 1005; i++)
			for (int j = 0; j < 1005; j++)
				follow_status[i][j] = 0;

		if (run())
			score = answer_score;
		else
			score = 0;

		printf("#%d %d\n", t, score);
	}
	return 0;
}















#define TRUE (1)
#define FALSE (0)
#define INVALID_IDX (-1)
#define MAX_USER (1005)
#define MAX_POST (100005)
 
struct post {
    int timestamp;
    int like;
    int uid;
};
 
static char follow_tbl[MAX_USER][MAX_USER];
static struct post post_tbl[MAX_POST];
static int last_post;
 
void init(int N)
{
    printf("init! - N:%d\n", N);
    int i, j;
    for (i = 0; i <= N; i++) {
        for (j = 0; j <= N; j++) {
            follow_tbl[i][j] = FALSE;
        }
    }
 
    for (i = 0; i < MAX_POST; i++) {
        post_tbl[i].timestamp = 0;
        post_tbl[i].like = 0;
        post_tbl[i].uid = 0;
    }
    last_post = INVALID_IDX;
}
 
void follow(int uID1, int uID2, int timestamp)
{
    printf("follow! - %d follows to %d\n", uID1, uID2);
    follow_tbl[uID1][uID2] = TRUE;
}
 
void makePost(int uID, int pID, int timestamp)
{
    printf("makePost! - uID:%d, pID:%d, timestamp:%d\n", uID, pID, timestamp);
    post_tbl[pID].uid = uID;
    post_tbl[pID].like = 0;
    post_tbl[pID].timestamp = timestamp;
    last_post = pID;
}
 
void like(int pID, int timestamp)
{
    printf("like! - pID:%d, timestamp:%d\n", pID, timestamp);
    post_tbl[pID].like = post_tbl[pID].like + 1;
}
 
void getFeed(int uID, int timestamp, int pIDList[])
{
	printf("################################\n");
    printf("getFeed! - uID:%d, timestamp:%d\n", uID, timestamp);
    int i, j, k, idx, temp_idx, temp_list[11] = { 0, };
 
    for (i = 0; i < 10; i++) {
        pIDList[i] = 0;
 
    }
 
	temp_list[0] = last_post;

    for (i = last_post - 1 ; i > 0 ; i--) {
        if (post_tbl[i].uid == uID || follow_tbl[uID][post_tbl[i].uid] == TRUE) 
		{
			k = last_post - i;
			printf("getFeed! - i:%d, k:%d\n", i, k);
			for(k ; k > 0 ; k--) 
			{
				if (post_tbl[temp_list[k]].like < post_tbl[i].like)
				{
					printf("getFeed! - new pID is bigger!\n");
					temp_list[k+1] = temp_list[k];
				} 
				else
				{
					printf("getFeed! - new pID is smaller!\n");
					temp_list[k+1] = i;
					break;
				}
				for (i=0 ; i<11; i++)
				{
					printf("getFeed! - temp_list[%d]:%d\n", i, temp_list[i]);
				}
			}
        }
    }
	for (i=0 ; i<11; i++)
	{
		pIDList[i] = temp_list[i];
	}
	printf("################################\n");
    return;
}

